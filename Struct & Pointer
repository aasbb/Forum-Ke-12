#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Struktur untuk data Contact
struct Contact
{
    char nama[50];
    char no_hp[15];
    char no_kantor[15];
    char email[50];
    char nama_perusahaan[50];
    struct Contact *next; // Pointer ke Contact berikutnya dalam linked list
};

// Fungsi untuk membuat Contact baru dan mengembalikan pointer ke Contact tersebut
struct Contact *buatContact()
{
    struct Contact *kontak = (struct Contact *)malloc(sizeof(struct Contact));
    if (kontak == NULL)
    {
        printf("Gagal mengalokasikan memori.\n");
        exit(1);
    }

    printf("Masukkan Nama: ");
    scanf(" %[^\n]", kontak->nama);
    printf("Masukkan No HP: ");
    scanf("%s", kontak->no_hp);
    printf("Masukkan No Kantor: ");
    scanf("%s", kontak->no_kantor);
    printf("Masukkan Email: ");
    scanf("%s", kontak->email);
    printf("Masukkan Nama Perusahaan: ");
    scanf(" %[^\n]", kontak->nama_perusahaan);

    kontak->next = NULL; // Set pointer ke NULL

    return kontak;
}

// Fungsi untuk menampilkan data Contact
void tampilkanContact(const struct Contact *kontak)
{
    printf("\n=== Tampilkan Data Contact ===\n");
    printf("Nama: %s\n", kontak->nama);
    printf("No HP: %s\n", kontak->no_hp);
    printf("No Kantor: %s\n", kontak->no_kantor);
    printf("Email: %s\n", kontak->email);
    printf("Nama Perusahaan: %s\n", kontak->nama_perusahaan);
}

// Fungsi untuk menghapus Contact dari linked list dan mengembalikan pointer ke Contact sebelumnya (atau NULL jika di awal)
struct Contact *hapusContact(struct Contact *head, struct Contact *target)
{
    if (head == NULL)
    {
        printf("Tidak ada data Contact yang bisa dihapus.\n");
        return NULL;
    }

    struct Contact *current = head;
    struct Contact *prev = NULL;

    while (current != NULL)
    {
        if (current == target)
        {
            if (prev == NULL)
            {
                // Jika target adalah elemen pertama
                head = current->next;
            }
            else
            {
                // Jika target bukan elemen pertama
                prev->next = current->next;
            }
            free(current);
            printf("Data Contact berhasil dihapus.\n");
            return head; // Kembalikan pointer ke head yang mungkin telah berubah
        }
        prev = current;
        current = current->next;
    }

    printf("Data Contact tidak ditemukan.\n");
    return head;
}

// Fungsi untuk membersihkan semua memori terkait dengan linked list Contact
void hapusSemuaContact(struct Contact *head)
{
    while (head != NULL)
    {
        struct Contact *temp = head;
        head = head->next;
        free(temp);
    }
}

int main()
{
    struct Contact *head = NULL; // Pointer ke kepala linked list Contact
    int menu;

    printf("=== Program Manajemen Data Contact ===\n");

    do
    {
        printf("\nMenu:\n");
        printf("1. Tambah Data Contact\n");
        printf("2. Tampilkan Data Contact\n");
        printf("3. Hapus Data Contact\n");
        printf("4. Keluar\n");
        printf("Pilih menu: ");
        scanf("%d", &menu);

        switch (menu)
        {
        case 1:
        {
            struct Contact *newContact = buatContact();
            if (head == NULL)
            {
                head = newContact;
            }
            else
            {
                struct Contact *current = head;
                while (current->next != NULL)
                {
                    current = current->next;
                }
                current->next = newContact;
            }
        }
        break;
        case 2:
        {
            struct Contact *current = head;
            while (current != NULL)
            {
                tampilkanContact(current);
                current = current->next;
            }
        }
        break;
        case 3:
        {
            if (head != NULL)
            {
                char namaCari[50];
                printf("Masukkan nama Contact yang akan dihapus: ");
                scanf(" %[^\n]", namaCari);

                struct Contact *current = head;
                struct Contact *prev = NULL;
                int found = 0;

                while (current != NULL)
                {
                    if (strcmp(current->nama, namaCari) == 0)
                    {
                        head = hapusContact(head, current);
                        found = 1;
                        break;
                    }
                    prev = current;
                    current = current->next;
                }

                if (!found)
                {
                    printf("Nama Contact tidak ditemukan.\n");
                }
            }
            else
            {
                printf("Tidak ada data Contact yang bisa dihapus.\n");
            }
        }
        break;
        case 4:
            hapusSemuaContact(head);
            printf("Terima kasih! Program selesai.\n");
            break;
        default:
            printf("Menu tidak valid. Silakan pilih menu lain.\n");
            break;
        }
    } while (menu != 4);

    return 0;
}
